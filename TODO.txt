# Quebrar os dados em dias ou semanas, no backup

# Conferir qualquer possibilidade de erro com mudança na adição de titulo ao index dos dataframes

# Arquivo de Backup Diário, Mensal, Anual (Diretórios?)

# Arquivo com plotagens utilizada pelo Dash

# Configuração de Ganho no datasheet do ADS1115

# Config.py com configuração de IP

# Tornar OFFLINE

# Arquivo com crição de média e perfil de uso

# Controle de amostragem no arquivo de configuração

# Arquivo de histórico com DatePickerRange

# Utilizar Tabs para os vários comodos da casa

# Código para confirmação de Timezone local com a global (com/sem hórario de verão)

# Colocar no título dos códigos licença MIT

# Evitar usar From IMport

# Contador de reinicialização

# Simplificar o uso do ADC, muito complexo deve ter jeito mais rapido

# Utilizar stylesheet offline (verificar erro)

BACKUP:
# Criar link simbolico em documentos
# BACKUP pegando uma parte anterior para plotar
# um arquivo do mês e outro normal

CAPTURA:
# adicionar coluna do sensor de gás (MQ-2), e antes de todos para ter preferência de alerta

CONFIG:
# configurar ganho
# completar com o restante das configurações
# arrumar aqui os limites do adc

ERRO:
# adicionar alerta na página principal
# implementar erro de conexão com rede local

GRAFICOS:
# erro quando inicia e não tem arquivo de dados no local

INFO:
# salvar em diretorio especifico
# deixar em aberto ou singleshots?
# fast shutter?
# configurar modos
# implementar vídeo
    '''
    @staticmethod
    def video(self, tempo):
        agora = dt.datetime.now().strftime('%Y-%m-%dT%H:%M:%S')

        subprocess.run(['raspivid', '-a', '12', agora, '.h264', '-n'])
    '''

INICIAR:
# verificar / Definir Timezone
# a cada mês criar um arquivo novo de BACKUP
# verificar se quantos sensores estão conectados (valores zeros contínuos)
# não precisa de dois join, eu acho